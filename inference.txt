//var bayesjs = require("bayesjs");
import bayesjs from 'bayesjs';

// export to window
window.inference = inference;

function inference(){
    var CBN = convertToBayesJSFormat();
    console.log(CBN);
    const given = { 'Tea': 'True' }
    var hello3 = bayesjs.inferAll(CBN, given, { force: true });
    console.log(hello3)
}

function convertToBayesJSFormat(){
    var CBN = {};
    for(var n = 0; n < nodes.length; n++){
        var nodeEntry = {};
        var node = nodes[n];
        var nodeName = node.name;
        nodeEntry["id"] = nodeName
        nodeEntry["states"] = node.values;
        if(node.conditionalTable === null){
            var emptyParentArray = new Array();
            nodeEntry["parents"] = emptyParentArray;
            var cpt = exogenousCPT(node);
            nodeEntry["cpt"] = cpt;
        }
        else{
            console.log(node.conditionalTable);
            var conditionality = extractConditionality(node);
            var conditionedOnLabels = conditionality[0];
            var conditionedOnVariables = conditionality[1];
            nodeEntry["parents"] = conditionedOnVariables;
            var cpt = endogenousCPT(node, conditionedOnLabels, conditionedOnVariables);
            nodeEntry["cpt"] = cpt;
        }
        CBN[nodeName] = nodeEntry;
    }
    return CBN;
}

function exogenousCPT(node){
    var cpt = {};
    var marginalTable = node.marginalTable;
    for(var i = 0; i < marginalTable.length; i++){
        var sector = marginalTable[i];
        var valueName = sector.label;
        var probability = sector.value;
        cpt[valueName] = probability;
      }
    return cpt;
}

function endogenousCPT(node, conditionedOnLabels, conditionedOnVariables){
    var cpt = new Array();
    var conditionalTable = node.conditionalTable;
    //1D Table
    if(conditionedOnVariables.length === 1){
        var cptEntry = {};
        var parent = conditionedOnVariables[0];
        var numberOfEntries = conditionedOnLabels[0].length;
        for (let e = 0; e < numberOfEntries; e++) {
            var whenCPT = {};
            var thenCPT = {};
            cellPieData = conditionalTable[e];
            var sectorLabel = conditionedOnLabels[0][e];
            whenCPT[parent] = sectorLabel;
            var cellPieData = conditionalTable[e]; //Probabilities 
            var values = node.values;
            for(var v = 0; v < values.length; v++){
                var valueName = values[v];
                var probability = cellPieData[v];
                thenCPT[valueName] = probability;
            }
            cptEntry = {"when": whenCPT, "then": thenCPT};
            cpt.push(cptEntry);
        }
    } 
    //2D Table
    if(conditionedOnVariables.length === 2){
         //Parents are conditionedOnVariables[1], conditionedOnVariables[0]
        //labels come from conditionedOnLabels[1][c] conditionedOnLabels[0][r];
        var numberOfRows = conditionedOnLabels[1].length;
        var numberOfColumns = conditionedOnLabels[0].length;
        var parent1 = conditionedOnVariables[1];
        var parent2 = conditionedOnVariables[0];
        for (let r = 0; r < numberOfRows; r++) {
            for (let c = 0; c < numberOfColumns; c++) {
                var whenCPT = {};
                var thenCPT = {};
                var sectorLabel1 = conditionedOnLabels[1][r];
                whenCPT[parent1] = sectorLabel1;
                var sectorLabel2 = conditionedOnLabels[0][c];    
                whenCPT[parent2] = sectorLabel2;
                var cellPieData = conditionalTable[c][r];
                var values = node.values;
                for(var v = 0; v < values.length; v++){
                    var valueName = values[v];
                    var probability = cellPieData[v];
                    thenCPT[valueName] = probability;
                }
                cptEntry = {"when": whenCPT, "then": thenCPT};
                cpt.push(cptEntry);
            }
        }
    } 
    return cpt;
}
// [0.73, 0.27], [0.12, 0.88]

//{ when: { CLOUDY:'T'}, then: { T: 0.1, F: 0.9 } },

//cpt: [
//    { when: { RAIN: 'T', SPRINKLER: 'T' }, then: { T: 0.99, F: 0.01 } },
//    { when: { RAIN: 'T', SPRINKLER: 'F' }, then: { T: 0.9, F: 0.1 } },
//    { when: { RAIN: 'F', SPRINKLER: 'T' }, then: { T: 0.9, F: 0.1 } },
//    { when: { RAIN: 'F', SPRINKLER: 'F' }, then: { T: 0.0, F: 1.0 } },
//],

//"marginalTable": [
  //  {
 //   "label": "True",
 //   "id": 1,
 //   "value": 0.14
 //   },
 //   {
 //   "label": "False",
 //   "id": 2,
 //   "value": 0.86
  //  }
//],